# ------------------------------------------------------------------------------------------------------------
# - * File: .vimrc.yaml
# - * Author: itchyny
# - * Last Change: 2021/02/20 23:28:28.
# ------------------------------------------------------------------------------------------------------------

plugin:

  itchyny/landscape.vim:
    before: |
      let g:landscape_cursorline = 0
    after: |
      colorscheme landscape
  itchyny/lightline.vim: {}
  itchyny/lightline-powerful:
    before: |
      let g:lightline = {'colorscheme': 'landscape','mode_map':{'c': 'NORMAL'}}
  itchyny/vim-quickrun-lightline-hooks: {}
  itchyny/vim-spellbad-pattern:
    script: |
      let g:spellbad_pattern = [ '\<a\ze [aieo]', '^\$', '\~\$\zs\s\+', '\<figure..\?\\', '\\ref{eq:', '^\\end{align}',
            \ '[^\~]\\\(eq\)\?ref\>', 'does not [a-z]*s\>', '\<a [a-z]\+[a-np-rt-wyz]\zss\>', 'in default', '[^,]\zs \ze\$[^$]\{,9\}\$']
  itchyny/calendar.vim:
    mapleader: ","
    command: Calendar
    mapping: <Plug>(calendar)
    script: |
      map <silent> <Leader>z <Plug>(calendar)
    before: |
      let g:calendar_cache_directory = $VIM_DATA.'/calendar'
      let g:calendar_date_endian = 'big'
      let g:calendar_views = [ 'year', 'month', 'day_3', 'clock' ]
      let g:calendar_google_calendar = 1
      let g:calendar_google_task = 1
      silent! execute 'source' expand(g:calendar_cache_directory . '/credentials.vim')
  itchyny/thumbnail.vim:
    command: Thumbnail
    mapping: <Plug>(thumbnail)
  itchyny/dictionary.vim:
    mapleader: ","
    command: Dictionary
    mapping: <Plug>(dictionary)
    script: |
      nnoremap <silent> <Leader>y :<C-u>Dictionary -no-duplicate<CR>
  itchyny/screensaver.vim:
    mapleader: ","
    mapping: <Plug>(screensaver)
    command: ScreenSaver
    script: |
      map <silent> <Leader>s :<C-u>ScreenSaver<CR>
  itchyny/vim-term:
    enable: has('terminal')
    command: Term
    script: |
      nnoremap <silent> H :<C-u>Term -opener=top\ 15new -restore -reporoot<CR>
      nnoremap <silent> S :<C-u>Term -opener=vnew -restore -reporoot<CR>
      nnoremap <expr><silent> s &modified ? ':<C-u>echoerr "E37: No write since last change."<CR>' : ":<C-u>Term -restore -reporoot<CR>"
  itchyny/vim-gof:
    script: |
      nnoremap <silent><C-o> :<C-u>Gof<CR>
      nnoremap <silent><C-p> :<C-u>Gof mru<CR>
      let g:gof_mru = 1
      let g:gof_mru_ignore_pattern = '\v/\.(git|cache|ssh)/|/node_modules/|/pkg/mod/|/Cellar/|/testdata/'
    build: go get github.com/mattn/gof
  itchyny/vim-gitbranch: {}
  itchyny/vim-closebuffer:
    mapmode:
      - n
      - i
    mapping: <Plug>(closebuffer)
    script: |
      map <C-w> <Plug>(closebuffer)
      imap <C-w> <Plug>(closebuffer)
  itchyny/vim-external:
    mapmode:
      - n
      - v
    mapleader: \
    mapping:
      - <Plug>(external-editor)
      - <Plug>(external-explorer)
      - <Plug>(external-browser)
    script: |
      map <Leader>g <Plug>(external-editor)
      map <Leader>n <Plug>(external-explorer)
      map <Leader>b <Plug>(external-browser)
      map ge <Plug>(external-explorer)
  itchyny/vim-increx:
    mapping:
      - <Plug>(increx-incr)
      - <Plug>(increx-decr)
    script: |
      nmap <C-a> <Plug>(increx-incr)
      nmap <C-x> <Plug>(increx-decr)
      nmap + <Plug>(increx-incr)
      nmap - <Plug>(increx-decr)
  itchyny/vim-qffrom:
    command:
      - Qffrom
      - Find
      - Make
      - Vint
    function: qffrom
    script: |
      nnoremap gf   :<C-u>Find<Space>
      nnoremap <F5> :<C-u>Make<CR>
    before: |
      let g:qffrom = {
            \   '_'   : { 'loclist': 1 },
            \   'find': { 'command': 'find <dir> -name .git -prune -o -name cache -prune -o -type f -iname $* -print', 'git_root': 1 },
            \   'make': { 'command': 'cd <dir> 2>&1 && '
            \           . 'if test -f Makefile -o -f makefile; then make $* 2>&1; '
            \           . 'elif test -f configure; then ./configure 2>&1 && make 2>&1; '
            \           . 'elif test -f Makefile.am; then autoreconf -i 2>&1 && ./configure 2>&1 && make 2>&1; '
            \           . 'else; make; fi',
            \             'dironly': 1
            \           },
            \   'vint': { 'command': 'vint $*' },
            \ }
      command! -nargs=* Find Qffrom find <args>
      command! -nargs=* Make Qffrom make <args>
      command! -nargs=* Vint Qffrom vint <args>
  itchyny/vim-grep:
    script: |
      nnoremap gr :<C-u>Grep<Space>
      nnoremap <silent> K :<C-u>Grep<CR>
      vnoremap <silent> K :Grep<CR>
  itchyny/vim-autoft:
    before: |
      let g:autoft_maxline = 15
      let g:autoft_config = [
            \ { 'filetype': 'html'      , 'pattern': '\v[<]%(!DOCTYPE|html|head|script|meta|link|div|span)>|^html:5\s*$' },
            \ { 'filetype': 'c'         , 'pattern': '\v^\s*#\s*%(include|define)>' },
            \ { 'filetype': 'go'        , 'pattern': '\v^%(import \(|func \S+\(\) \{)' },
            \ { 'filetype': 'rust'      , 'pattern': '\v%(<let mut>|^impl |^fn main|^use std::)' },
            \ { 'filetype': 'scala'     , 'pattern': '\v^%(import|module) %(com|org)|<case.*\=\>|%(<private>|<implicit>).*%(<def>|<val>)|yield .*\{|case class' },
            \ { 'filetype': 'haskell'   , 'pattern': '\v^%(import|module) %([A-Z]|qualified)|main\s+::|\s::\s.*\s-\>\s|\{-# *%(LANGUAGE|OPTIONS)|^\{-' },
            \ { 'filetype': 'diff'      , 'pattern': '\v^diff -|^commit .*\nAuthor:' },
            \ { 'filetype': 'javascript', 'pattern': '\v<function>\s+\k*\s+([^)]*)\{|<window\.' },
            \ { 'filetype': 'sh'        , 'pattern': '\v^#!.*%(<sh>|<bash>)\s*$|<if +\[ -' },
            \ { 'filetype': 'hatena'    , 'pattern': '\v^%(\>\|[a-z]+\||\|\|\<)$|^\*\[[a-z]+\]' },
            \ { 'filetype': 'python'    , 'pattern': '\v^\s+%(def|if|for)\s.*:$' },
            \ { 'filetype': 'vim'       , 'pattern': '\v%(^\s*<(let|set|autocmd) )|<[nvio]?noremap>|<g:loaded_|^function!' },
            \ { 'filetype': 'css'       , 'pattern': '\v^%(html|body)%(, *%([a-z]+))* *\{' },
            \ { 'filetype': 'sql'       , 'pattern': '\v\c^(BEGIN|SELECT|UPDATE|DELETE)>' },
            \ { 'filetype': 'markdown'  , 'pattern': '\v^# $' },
            \ ]
  itchyny/vim-extracmd:
    cmdline: ':'
    after: |
      call extracmd#set('a[ppend]', '')
      call extracmd#set('i[nsert]', '')
      call extracmd#set('<silent>', 'vp[s]'  , 'vsp')
      call extracmd#set('<silent>', 'q1'     , 'q!')
      call extracmd#set('<silent>', 'qq'     , 'qa!')
      call extracmd#set('<silent>', 'qa1'    , 'qa!')
      call extracmd#set('sil[ent]1', 'silent!')
      call extracmd#set('<silent>', 'w!!'    , 'w !sudo tee > /dev/null %')
      call extracmd#set('<silent>', 'make'   , 'silent! make')
      call extracmd#set('<silent>', 'syn'    , 'echo synIDattr(synID(line(''.''), col(''.''), 0), ''name'')')
      call extracmd#set('<silent>', 'pro[fil]', 'profile start profile.log <bar> profile func *')
      call extracmd#set('<silent>', 'rof'    , 'profile start profile.log <bar> profile func *')
      call extracmd#set('<silent>', 'rtp'    , 'Tmpbuffer :PP split(&rtp, '','')')
      call extracmd#set('<silent>', 'scr[iptnames]', 'Tmpbuffer scriptnames')
      call extracmd#set('<silent>', 'gd'     , 'Tmpbuffer git diff <bar> set filetype=diff')
      call extracmd#set('<silent>', 'gdc'    , 'Tmpbuffer git diff --cached <bar> set filetype=diff')
      command! -nargs=* Git Tmpbuffer git <args>
      call extracmd#set('git'     , 'Git')
      call extracmd#set('gina'    , 'Gina')
      call extracmd#set('gita'    , 'Gita')
      function! GitCommit(cmd, diffcmd) abort
        call system(a:diffcmd . ' --quiet')
        if !v:shell_error
          echohl ErrorMsg
          echo 'Nothing to commit.'
          echohl None
          return
        endif
        if bufname('') !=# '' || &modified || &filetype !=# ''
          tabnew
        endif
        execute 'Tmpbuffer' a:diffcmd
        setlocal filetype=diff
        let bufnr = bufnr()
        execute 'Gina' a:cmd
        execute 'autocmd! QuitPre <buffer> try | bwipeout' bufnr '| catch | endtry'
      endfunction
      call extracmd#set('<silent>', 'ga'     , 'Gita add %')
      call extracmd#set('<silent>', 'gpl'    , 'Gina pull -p')
      call extracmd#set('<silent>', 'gc'     , 'Gina checkout')
      call extracmd#set('<silent>', 'gpo'    , 'Gina push origin')
      call extracmd#set('<silent>', 'gpom'   , 'Gina push origin master')
      call extracmd#set('<silent>', 'gm'     , 'call GitCommit("commit", "git diff --staged")')
      call extracmd#set('<silent>', 'gam'    , 'call GitCommit("commit -a", "git diff HEAD")')
      call extracmd#set('<silent>', 'gs'     , 'Gita status')
      call extracmd#set('<silent>', 'blame'  , 'Gita blame')
      call extracmd#set('<silent>', 'aoff'   , 'AutodateOFF')
      call extracmd#set('<silent>', 'aon'    , 'AutodateON')
      call extracmd#set('<silent>', 'bc'     , 'Term -close -opener=top\ new bc -l')
      call extracmd#set('<silent>', 'cal[endar]', 'Calendar -position=topleft -split=vertical -width=27 -view=year')
      call extracmd#set('<silent>', 'date'   , 'echo strftime("%x (%a) %X")')
      call extracmd#set('<silent>', 'di'     , 'Dictionary -cursor-word -no-duplicate')
      call extracmd#set('<silent>', 'err'    , 'LspDocumentDiagnostics')
      call extracmd#set('<silent>', 'lin'    , 'silent! call vimlint#vimlint(expand("%"), {"output": "quickfix"}) <bar> leftabove copen')
      call extracmd#set('<silent>', 'lint'   , 'silent! call vimlint#vimlint(".", {"output": "quickfix"}) <bar> leftabove copen')
      call extracmd#set('<silent>', 'push'   , 'call system("blogsync push " . string(expand("%:p")))')
      call extracmd#set('terminal', 'terminal ++close')
  itchyny/vim-qfedit:
    filetype: qf
  itchyny/vim-tmpbuffer:
    command: Tmpbuffer
  itchyny/vim-hatena-link:
    command: HatenaLinkPaste
    script: |
      nnoremap <silent><S-l> :<C-u>HatenaLinkPaste<CR>
  itchyny/vim-winfix: {}
  itchyny/vim-cursorword:
    after: |
      augroup cursorword-filetype
        autocmd!
        autocmd FileType qf,unite,vimfiler,thumbnail,quickrun,calendar let b:cursorword = 0
      augroup END
  itchyny/vim-parenmatch:
    after: |
      highlight! link MatchParen ParenMatch
  itchyny/vim-highlighturl: {}
  itchyny/vim-insert-mode-motion:
    insert: true
  itchyny/vim-cmdline-ranges:
    cmdline: ':'
  itchyny/vim-cmdline-escape:
    cmdline: '/'
    before: |
      let g:cmdline_escape_default_mapping = 0
      cmap / <Plug>(cmdline-escape-/)
  itchyny/vim-histexclude:
    cmdline: ':'
    before: |
      let g:histexclude = {
            \ ':': '\v^[:[:space:]]*%(\d+|v?ne%[w]|v?sp%[lit]|tabnew|tabc%[lose]|i%[nsert]|a%[ppend]|%(noa%[utocmd] +)?[eqwx]|c%[hange])\s*$',
            \ }
  itchyny/vim-extra-snippets: {}
  itchyny/vim-haskell-indent:
    filetype: haskell
  itchyny/vim-haskell-sort-import:
    filetype: haskell
  itchyny/vim-pdf:
    filetype: pdf

  prabirshrestha/vim-lsp:
    enable: has('timers')
    before: |
      let g:lsp_async_completion = 1
      let g:lsp_text_edit_enabled = 0
      let g:lsp_signs_enabled = 0
      let g:lsp_document_highlight_enabled = 0
      augroup lsp_install
        autocmd!
        autocmd User lsp_buffer_enabled
              \   setlocal omnifunc=lsp#complete
              \ | nmap <buffer> <C-]> <plug>(lsp-definition)
              \ | nmap <buffer> ,n    <plug>(lsp-next-error)
              \ | nmap <buffer> ,p    <plug>(lsp-previous-error)
              \ | nmap <buffer> <F2>  <plug>(lsp-rename)
              \ | inoremap <expr><CR> asyncomplete#close_popup() . "\<CR>"
      augroup END
    after: |
      doautocmd BufEnter
  prabirshrestha/asyncomplete.vim:
    enable: has('timers')
    after: |
      function! s:asyncomplete_preprocessor(options, matches) abort
        if a:options.typed =~# '\v^$|\s$'
          return
        endif
        let items = []
        for [source_name, matches] in map(sort(map(
              \ filter(items(a:matches), '!empty(v:val[1].items)'),
              \ "[v:val[0] !~# 'asyncomplete_lsp', v:val]")), 'v:val[1]')
          for item in matches.items
            if stridx(item.word, a:options.base) == 0
              call add(items, item)
            endif
          endfor
        endfor
        call asyncomplete#preprocess_complete(a:options, items)
      endfunction
      let g:asyncomplete_preprocessor = [function('s:asyncomplete_preprocessor')]
  prabirshrestha/asyncomplete-lsp.vim:
    enable: has('timers')
    dependon: asyncomplete
  prabirshrestha/asyncomplete-buffer.vim:
    enable: has('timers')
    dependon: asyncomplete
    after: |
      call asyncomplete#register_source(asyncomplete#sources#buffer#get_source_options({
          \ 'name': 'buffer',
          \ 'whitelist': ['*'],
          \ 'completor': function('asyncomplete#sources#buffer#completor'),
          \ 'config': {
          \    'max_buffer_size': 100000,
          \  },
          \ 'events': ['BufWinEnter','BufWritePost'],
          \ }))
  prabirshrestha/asyncomplete-file.vim:
    enable: has('timers')
    dependon: asyncomplete
    after: |
      call asyncomplete#register_source(asyncomplete#sources#file#get_source_options({
          \ 'name': 'file',
          \ 'whitelist': ['*'],
          \ 'completor': function('asyncomplete#sources#file#completor'),
          \ }))
  yami-beta/asyncomplete-omni.vim:
    enable: has('timers')
    dependon: asyncomplete
    after: |
      call asyncomplete#register_source(asyncomplete#sources#omni#get_source_options({
          \ 'name': 'omni',
          \ 'whitelist': ['*'],
          \ 'completor': function('asyncomplete#sources#omni#completor'),
          \ }))
  prabirshrestha/asyncomplete-neosnippet.vim:
    enable: has('timers')
    dependon: asyncomplete
    insert: true
    after: |
      call asyncomplete#register_source(asyncomplete#sources#neosnippet#get_source_options({
          \ 'name': 'neosnippet',
          \ 'whitelist': ['*'],
          \ 'completor': function('asyncomplete#sources#neosnippet#completor'),
          \ }))
  htlsne/asyncomplete-look:
    enable: has('timers')
    dependon: asyncomplete
    after: |
      call asyncomplete#register_source({
          \ 'name': 'look',
          \ 'allowlist': ['text', 'markdown', 'gina-commit', ''],
          \ 'completor': function('asyncomplete#sources#look#completor'),
          \ })
  mattn/vim-lsp-settings:
    enable: has('timers')
    dependon: lsp
    before: |
      let g:lsp_settings = {
          \ 'efm-langserver': {'disabled': 1},
          \ }
  Shougo/neosnippet:
    insert: true
    script: |
      let g:neosnippet#snippets_directory = [expand('$XDG_DATA_HOME/miv/extra-snippets/snippets')]
      imap <expr><TAB> neosnippet#expandable_or_jumpable() ? "\<Plug>(neosnippet_expand_or_jump)" : pumvisible() ? "\<C-n>" : &expandtab ? repeat("\<Space>", &shiftwidth):  "\t"
      smap <expr><TAB> neosnippet#expandable_or_jumpable() ? "\<Plug>(neosnippet_expand_or_jump)" : &expandtab ? repeat("\<Space>", &shiftwidth) : "\t"
      imap <expr><C-o> neosnippet#expandable_or_jumpable() ? "\<Plug>(neosnippet_expand_or_jump)" : "\<ESC>o"
      imap <expr> <Plug>(neosnippet-emmet-supertab) neosnippet#expandable_or_jumpable() ? "\<Plug>(neosnippet_expand_or_jump)" : pumvisible() ? "\<C-n>" : repeat("\<Space>", &shiftwidth)
      let g:neosnippet#scope_aliases = { 'typescript': 'javascript' }
      let g:neosnippet#enable_snipmate_compatibility = 1
  Shougo/neosnippet-snippets:
    insert: true
  Shougo/neco-vim:
    filetype: vim
  prabirshrestha/asyncomplete-necovim.vim:
    enable: has('timers')
    filetype: vim
    dependon:
      - asyncomplete
      - neco
    after: |
      call asyncomplete#register_source(asyncomplete#sources#necovim#get_source_options({
          \ 'name': 'necovim',
          \ 'whitelist': ['vim'],
          \ 'completor': function('asyncomplete#sources#necovim#completor'),
          \ }))
  thinca/vim-quickrun:
    command: QuickRun
    mapping: <Plug>(quickrun)
    mapleader: \
    before: |
      let g:quickrun_config = {'_': {'runner': 'job', 'split': 'vertical', 'into': 1, 'command': 'bash'}}
      let g:quickrun_config.haskell = {'command' : 'stack', 'exec': '%c runghc %s'}
      let g:quickrun_config.perl = {'command': 'carton', 'exec': '%c exec -- perl %s'}
      let g:quickrun_config.ruby = {'command': 'ruby'}
      let g:quickrun_config.markdown = {'type' : 'markdown/pandoc', 'outputter': 'browser', 'cmdopt': '-s'}
      let g:quickrun_config.nroff = {'command': 'man', 'args': " -P cat | tr '\b' '\1' | sed -e 's/.\1//g'", 'filetype': 'man'}
      let g:quickrun_config.gnuplot = {'command' : 'gnuplot'}
      let g:quickrun_config.objc = {'command': 'cc', 'exec': ['%c %s -o %s:p:r -framework Foundation', '%s:p:r %a'], 'tempfile': '{tempname()}.m', 'hook/sweep/files': '%s:p:r'}
      let g:quickrun_config.dot = {'command' : 'dot', 'exec': ['%c -Tpng %s -o %s:p:r.png', (executable('gnome-open') ? 'gnome-open' : 'open') . ' %s:p:r.png'] }
      let g:quickrun_config.abc = {'command': 'abcm2ps', 'exec': extend(['%c %s -O %s:p:r.ps', 'ps2pdf %s:p:r.ps', 'open %s:p:r.pdf'], executable('abc2midi') ? ['abc2midi %s -o %s:p:r.mid', 'open %s:p:r.mid'] : [])}
      let g:quickrun_config.brainfuck = {'command': 'bf'}
      let g:quickrun_config.quickrun = {'command': 'cat'}
    script: |
      nnoremap <expr> <C-c> exists('*quickrun#is_running') && quickrun#is_running() ? quickrun#sweep_sessions() : "\<C-c>"
      nnoremap <silent> <Leader>r :<C-u>call <SID>quickrun(0, 0)<CR>
      nnoremap <silent> <Leader>e :<C-u>call <SID>quickrun(1, 0)<CR>
      nnoremap <silent> <Leader>o :<C-u>call <SID>quickrun(1, 1)<CR>
      function! s:quickrun(input, output)
        let bufname = '-outputter/buffer/name ' . string( '[quickrun output'. (tabpagenr() > 1 ? ' ' . tabpagenr() : '') . ']' )
        let name = matchstr(expand('%:t'), '.*\ze\.')
        let out = a:output ? '>file:' . name . 'o' : ''
        let infile = name . 'i'
        let in = a:input ? (filereadable(infile) ? '<' . infile : filereadable('i') ? '<i' : '') : ''
        execute 'QuickRun' bufname in out
      endfunction
  tyru/open-browser.vim:
    function: openbrowser

  Shougo/vimfiler:
    mapleader: \
    command:
      - VimFiler
      - VimFilerBufferDir
    dependon:
      - unite
    before: |
      let g:vimfiler_as_default_explorer = 1
      let g:vimfiler_sort_type = 'TIME'
      let g:vimfiler_safe_mode_by_default = 0
      let g:vimfiler_force_overwrite_statusline = 0
      let g:vimfiler_restore_alternate_file = 0
      let g:vimfiler_data_directory = $VIM_DATA.'/vimfiler'
      let g:vimfiler_detect_drives = []
      let g:vimfiler_min_cache_files = 10000000000
      let g:vimfiler_ignore_pattern = '\v^\.|\.(o|hi|bak|pyc|aux|bbl|blg|dvi|nav|snm|toc|out)$|^(dist|bower_components|node_modules|score|perl|old_project|py|scala|scansnap|univ)$|conflicted copy|競合コピー|^Icon\r$'
      let g:vimfiler_tree_leaf_icon = ' '
      let g:vimfiler_tree_opened_icon = '▾'
      let g:vimfiler_tree_closed_icon = '▸'
      let g:vimfiler_file_icon = '-'
      let g:vimfiler_readonly_file_icon = '✗'
      let g:vimfiler_marked_file_icon = '✓'
      let g:vimfiler_execute_file_list = {'jpg': 'open', 'jpeg': 'open', 'gif': 'open', 'bmp': 'open', 'html': 'open', 'ppt': 'open', 'pdf': 'open', 'png': 'open'}
    script: |
      nnoremap <silent> <Leader>f :<C-u>VimFilerBufferDir -status -auto-cd<CR>
      nnoremap <silent> <Leader><Leader> :<C-u>VimFilerBufferDir -status -auto-cd<CR>
  Shougo/unite.vim:
    command: Unite
    function: unite
    before: |
      let g:unite_force_overwrite_statusline = 0
      let g:unite_data_directory = $VIM_DATA.'/unite'
      let g:unite_source_grep_max_candidates = 500
      let g:unite_source_find_max_candidates = 500
    after: |
      call unite#custom#profile('default', 'context', {
            \ 'start_insert' : 1,
            \ 'prompt_direction': 'top',
            \ 'prompt': '> ',
            \ 'candidate_icon': '- ',
            \ 'marked_icon': '* ',
            \ 'hide_icon': 0 })
  itchyny/unite-changetime:
    loadafter: unite
  itchyny/unite-preview:
    loadafter: unite
  itchyny/unite-auto-open:
    enable: "0"
  itchyny/unite-eject:
    enable: "0"

  Align:
    command: Align
  sjl/gundo.vim:
    command: GundoToggle
    enable: has('python3')
    script: |
      let g:gundo_prefer_python3 = 1
  xterm-color-table.vim:
    command: XtermColorTable
  thinca/vim-scouter:
    command: Scouter
  thinca/vim-prettyprint:
    command: PP
  thinca/vim-visualstar:
    mapmode:
      - v
    mapping:
      - <Plug>(visualstar-*)
      - <Plug>(visualstar-#)
    script: |
      let g:visualstar_no_default_key_mappings = 1
      xmap <silent> * <Plug>(visualstar-*):<C-u>set hlsearch<CR>
      xmap <silent> # <Plug>(visualstar-#):<C-u>set hlsearch<CR>

  tpope/vim-surround:
    mapmode:
      - n
      - v
    mapping:
      - <Plug>Dsurround
      - <Plug>Csurround
      - <Plug>VSurround
    script: |
      nmap ds <Plug>Dsurround
      nmap cs <Plug>Csurround
      vmap S <Plug>VSurround
    before: |
      let g:surround_{char2nr('$')} = "$\r$"
  tpope/vim-repeat:
    function: repeat
  tpope/vim-abolish:
    command: Subvert
  tomtom/tcomment_vim:
    command: TComment
    mapping: <Plug>TComment_gc
    function: tcomment
    script: |
      nnoremap <silent> __ :TComment<CR>
      vnoremap <silent> __ :TComment<CR>
      nmap <silent> gc <Plug>TComment_gc
    before: |
      let g:tcommentMapLeader1 = ''
      let g:tcommentMapLeader2 = ''
      let g:tcommentMapLeaderUncommentAnyway = ''
      let g:tcommentMapLeaderCommentAnyway = ''
  autodate.vim:
    before: |
      let g:autodate_format = '%Y/%m/%d %H:%M:%S'
  matchit.zip: {}
  machakann/vim-swap:
    mapping:
      - <Plug>(swap-interactive)
      - <Plug>(swap-prev)
      - <Plug>(swap-next)
    script: |
      nmap gs <Plug>(swap-interactive)
      nmap g< <Plug>(swap-prev)
      nmap g> <Plug>(swap-next)
  markonm/traces.vim: {}
  vim-test/vim-test:
    mapleader: ","
    command:
      - TestNearest
      - TestFile
      - TestSuite
    before: |
      let g:test#strategy = 'vimterminal'
      let g:test#vim#term_position = 'top 15 new'
    script: |
      nnoremap <expr><silent> <Leader>t
            \ expand('%:p') =~# '/procon/'
            \ ? ':<C-u>terminal cargo compete test ' . matchstr(bufname('%'), '\v^.+\ze\.') . '<CR>'
            \ : ':<C-u>TestSuite<CR>'
      command! Submit execute 'terminal cargo compete submit' matchstr(bufname('%'), '\v^.+\ze\.')

  cohama/agit.vim:
    mapleader: ","
    command:
      - Agit
      - AgitFile
    before: |
      let g:agit_enable_auto_refresh = 1
      let g:agit_max_author_name_width = 10
    script: |
      nnoremap <silent> <Leader>g :<C-u>Agit<CR>
  itchyny/vim-gita: # use a fork for now
    command: Gita
    before: |
      let g:gita#suppress_warning = 1
  lambdalisue/gina.vim:
    command: Gina
    after: |
      call gina#custom#command#option('/\v(status|branch|ls|grep|changes)', '--opener', 'botright 10split')
      call gina#custom#command#option('/\v(blame|diff|log)', '--opener', 'tabnew')
      call gina#custom#command#option('/commit', '--opener', 'below vnew')
      call gina#custom#command#option('blame', '--width', string(winwidth(0) / 4))
  hotwatermorning/auto-git-diff:
    before: |
      let g:auto_git_diff_show_window_at_right = 1
      let g:auto_git_diff_command_options = ''
  mattn/gist-vim:
    command: Gist
    dependon: webapi
  mattn/webapi-vim:
    loadbefore:
      - gist
      - emmet
  ynkdir/vim-vimlparser:
    loadbefore: vimlint
  syngan/vim-vimlint:
    function: vimlint
    dependon: vimlparser
  Shougo/vimproc.vim:
    build: make
    function: vimproc
    loadbefore:
      - vimfiler
  thinca/vim-themis:
    function: themis

  kana/vim-textobj-user: {}
  kana/vim-textobj-entire:
    dependon: textobj-user
    mapmode:
      - o
      - v
    mapping:
      - <Plug>(textobj-entire-a)
      - <Plug>(textobj-entire-i)
      - ie
      - ae
  kana/vim-textobj-line:
    dependon: textobj-user
    mapmode:
      - o
      - v
    mapping:
      - <Plug>(textobj-line-a)
      - <Plug>(textobj-line-i)
      - il
      - al
  kana/vim-textobj-function:
    dependon: textobj-user
    mapmode:
      - o
      - v
    mapping:
      - <Plug>(textobj-function-a)
      - <Plug>(textobj-function-i)
      - <Plug>(textobj-function-A)
      - <Plug>(textobj-function-I)
      - if
      - af
      - iF
      - aF
  kana/vim-textobj-indent:
    dependon: textobj-user
    mapmode:
      - o
      - v
    mapping:
      - <Plug>(textobj-indent-a)
      - <Plug>(textobj-indent-i)
      - <Plug>(textobj-indent-A)
      - <Plug>(textobj-indent-I)
      - ii
      - ai
      - iI
      - aI
  kana/vim-textobj-underscore:
    dependon: textobj-user
    mapmode:
      - o
      - v
    mapping:
      - <Plug>(textobj-underscore-a)
      - <Plug>(textobj-underscore-i)
      - i_
      - a_
  glts/vim-textobj-comment:
    dependon: textobj-user
    mapmode:
      - o
      - v
    mapping:
      - <Plug>(textobj-comment-a)
      - <Plug>(textobj-comment-i)
      - <Plug>(textobj-comment-big-a)
      - <Plug>(textobj-comment-big-i)
      - ic
      - ac
      - iC
      - aC
  osyo-manga/vim-textobj-multiblock:
    dependon: textobj-user
    mapmode:
      - o
      - v
    mapping:
      - <Plug>(textobj-multiblock-a)
      - <Plug>(textobj-multiblock-i)
    before: |
      let g:textobj#multiblock#default_blocks = [
            \ [ '(', ')', 1 ],
            \ [ '[', ']', 1 ],
            \ [ '{', '}', 1 ],
            \ [ '<', '>', 1 ],
            \ [ '`', '`', 1 ],
            \ [ '"', '"', 1 ],
            \ [ "'", "'", 1 ],
            \ [ '`', "'", 1 ],
            \ ]
  osyo-manga/vim-textobj-multitextobj:
    dependon:
      - textobj-user
      - textobj-multiblock
      - textobj-comment
      - textobj-indent
      - textobj-function
      - textobj-entire
    mapmode:
      - o
      - v
    mapping:
      - <Plug>(textobj-multitextobj-a)
      - <Plug>(textobj-multitextobj-i)
    before: |
      let g:textobj_multitextobj_textobjects_i = [
            \   { 'textobj': "\<Plug>(textobj-multiblock-i)", 'is_cursor_in': 1 },
            \   { 'textobj': "\<Plug>(textobj-comment-i)", 'is_cursor_in': 1 },
            \   { 'textobj': "\<Plug>(textobj-indent-i)", 'is_cursor_in': 1 },
            \   { 'textobj': "\<Plug>(textobj-function-i)", 'is_cursor_in': 1 },
            \   "\<Plug>(textobj-entire-i)",
            \ ]
    script: |
      omap a<CR> <Plug>(textobj-multitextobj-a)
      omap i<CR> <Plug>(textobj-multitextobj-i)
      omap <CR> <Plug>(textobj-multitextobj-i)
      xmap a<CR> <Plug>(textobj-multitextobj-a)
      xmap i<CR> <Plug>(textobj-multitextobj-i)
      xmap <CR> <Plug>(textobj-multitextobj-i)
  thinca/vim-textobj-between:
    dependon: textobj-user
    mapmode:
      - o
      - v
    mapping:
      - <Plug>(textobj-between-a)
      - <Plug>(textobj-between-i)
    before: |
      let g:textobj_between_no_default_key_mappings = 1
      omap ib <Plug>(textobj-between-i)
      omap ab <Plug>(textobj-between-a)
      vmap ib <Plug>(textobj-between-i)
      vmap ab <Plug>(textobj-between-a)

  kana/vim-operator-user: {}
  kana/vim-operator-replace:
    dependon: operator-user
    before: |
      nmap [  <Plug>(operator-replace)
  tyru/operator-camelize.vim:
    dependon: operator-user
    before: |
      nmap g_ <Plug>(operator-camelize-toggle)

  motemen/hatena-vim:
    filetype: hatena
  elzr/vim-json:
    filetype: json
  vito-c/jq.vim:
    filetype: jq
  cespare/vim-toml:
    filetype: toml
  html5.vim:
    filetype: html
  mattn/emmet-vim:
    filetype:
      - html
      - haml
      - jade
      - slim
      - css
      - less
      - sass
      - scss
    dependon: webapi
    before: |
      let g:user_emmet_settings = { 'indentation' : '  ' }
    after: |
      imap <expr><silent> <Plug>(neosnippet-emmet-supertab) neosnippet#expandable_or_jumpable() ? "\<Plug>(neosnippet_expand_or_jump)" : &filetype =~# '\vhtml<bar>haml<bar>jade<bar>slim<bar>css<bar>less<bar>sass<bar>scss' && emmet#isExpandable() ? "\<Plug>(emmet-expand-abbr)" : pumvisible() ? "\<C-n>" : repeat("\<Space>", &shiftwidth)
      imap <expr><silent> <Plug>(emmet-supertab) &filetype =~# '\vhtml<bar>haml<bar>jade<bar>slim<bar>css<bar>less<bar>sass<bar>scss' && emmet#isExpandable() ? "\<Plug>(emmet-expand-abbr)" : pumvisible() ? "\<C-n>" : repeat("\<Space>", &shiftwidth)
  wavded/vim-stylus:
    filetype: stylus
  groenewege/vim-less:
    filetype: less
  tpope/vim-haml:
    filetype: haml
  jparise/vim-graphql:
    filetype: graphql
  syntaxm4.vim:
    filetype: m4
  jade.vim:
    filetype: jade
  slim-template/vim-slim:
    filetype: slim
  kchmck/vim-coffee-script:
    filetype: coffee
  raichoo/purescript-vim:
    filetype: purescript
  briancollins/vim-jst:
    filetype: jst
  rest.vim:
    filetype: rest
  tpope/vim-markdown:
    filetype: markdown
  rhysd/vim-syntax-codeowners:
    filetype: codeowners
  pangloss/vim-javascript:
    filetype: javascript
  derekwyatt/vim-scala:
    filetype: scala
  mattn/vim-goimports:
    filetype: go
  johejo/gomod.vim:
    filetype: gomod
  rust-lang/rust.vim:
    filetype: rust
    before: |
      let g:rustfmt_autosave = 1
  udalov/kotlin-vim:
    filetype: kotlin
  kballard/vim-swift:
    filetype: swift
    before: |
      let g:swift_suppress_showmatch_warning = 1
      let g:swift_no_conceal = 1
  rhysd/vim-llvm:
    filetype: llvm
  tmux-plugins/vim-tmux:
    filetype: tmux
  chr4/nginx.vim:
    filetype: nginx
  elixir-editors/vim-elixir:
    filetype: elixir
  dannywillems/vim-icalendar:
    filetype: icalendar

before: |
  let g:loaded_2html_plugin = 1
  let g:loaded_rrhelper = 1
  let g:loaded_getscriptPlugin = 1
  let g:loaded_vimballPlugin = 1
  let g:loaded_matchparen = 1
  let g:loaded_sql_completion = 0

  let g:hs_highlight_boolean = 1
  let g:hs_highlight_types = 1
  let g:hs_highlight_more_types = 1

  let g:is_bash = 1
  let g:no_pdf_maps = 1

after: |
  let g:mapleader = ','

  augroup setlocal-filetype
    autocmd!
    autocmd BufNewFile,BufReadPost *.bf setlocal filetype=brainfuck
    autocmd BufNewFile,BufReadPost *.csv setlocal filetype=csv
    autocmd BufNewFile,BufReadPost *.def setlocal filetype=perl
    autocmd BufNewFile,BufReadPost *.gnuplot setlocal filetype=gnuplot
    autocmd BufNewFile,BufReadPost *.jq setlocal filetype=jq
    autocmd BufNewFile,BufReadPost *.ksy setlocal filetype=yaml
    autocmd BufNewFile,BufReadPost *.stl setlocal filetype=stl
    autocmd BufNewFile,BufReadPost Capfile* setlocal filetype=ruby
    autocmd BufReadPre *histfile setlocal binary
  augroup END

filetype:
  vim: |
    setlocal foldmethod=marker
    cnoremap <buffer><expr> <C-r><C-w> <SID>word()
    function! s:word()
      let m = "\<C-r>\<C-w>"
      let s = synIDattr(synID(line('.'), col('.'), 0), 'name')
      return s ==# 'vimOption' ? "'".m."'" : s =~# 'vim\%(Command\|Map\>\|Let\|AugroupKey\|AutoCmd\>\|FTCmd\|NotFunc\)' ? ':'.m : s =~# 'vimFuncName' ? m.'()' : m
    endfunction
    if bufname('%') ==# '[Command Line]'
      setlocal nowrap
    endif
  qf: |
    setlocal cursorline
    nnoremap <buffer><silent> q     :<C-u>try<bar>wincmd p<bar>cclose<bar>lclose<bar>catch<bar>enew<bar>endtry<CR>
    nnoremap <buffer><silent> <C-t> :<C-u>call <SID>qfenter('tabnew')<CR>
    nnoremap <buffer><silent> <C-n> :<C-u>call <SID>qfenter('wincmd p <bar> new')<CR>
    nnoremap <buffer><silent> <C-v> :<C-u>call <SID>qfenter('wincmd p <bar> vnew')<CR>
    nnoremap <buffer><silent> <C-h> :<C-u>call <SID>qfenter('wincmd p <bar> wincmd h')<CR>
    nnoremap <buffer><silent> <C-l> :<C-u>call <SID>qfenter('wincmd p <bar> wincmd l')<CR>
    function! s:qfenter(cmd)
      let lnum = line('.')
      let cmd = get(get(getwininfo(win_getid()), 0, {}), 'loclist', 0) ? 'll' : 'cc'
      silent! execute a:cmd
      silent! execute cmd lnum
    endfunction
  yacc: |
    setlocal shiftwidth=4 expandtab
    call tcomment#type#Define('yacc', '// %s')
  html: |
    imap <buffer> <Tab> <Plug>(neosnippet-emmet-supertab)
    imap <buffer> <C-g> <Plug>(emmet-supertab)
  css: |
    setlocal iskeyword=37,45,48-57,95,a-z,A-Z,192-255
    imap <buffer> <Tab> <Plug>(neosnippet-emmet-supertab)
    imap <buffer> <C-g> <Plug>(emmet-supertab)
  haml: |
    imap <buffer> <Tab> <Plug>(neosnippet-emmet-supertab)
    imap <buffer> <C-g> <Plug>(emmet-supertab)
  jade: |
    imap <buffer> <Tab> <Plug>(neosnippet-emmet-supertab)
    imap <buffer> <C-g> <Plug>(emmet-supertab)
  slim: |
    imap <buffer> <Tab> <Plug>(neosnippet-emmet-supertab)
    imap <buffer> <C-g> <Plug>(emmet-supertab)
  less: |
    imap <buffer> <Tab> <Plug>(neosnippet-emmet-supertab)
    imap <buffer> <C-g> <Plug>(emmet-supertab)
  sass: |
    imap <buffer> <Tab> <Plug>(neosnippet-emmet-supertab)
    imap <buffer> <C-g> <Plug>(emmet-supertab)
  scss: |
    imap <buffer> <Tab> <Plug>(neosnippet-emmet-supertab)
    imap <buffer> <C-g> <Plug>(emmet-supertab)
  typescript: |
    setlocal shiftwidth=4
    imap <buffer> <Tab> <Plug>(neosnippet-emmet-supertab)
  purescript: |
    highlight link purescriptImport Include
    highlight link purescriptQualifiedImport Include
    highlight link purescriptType Normal
    highlight link purescriptDot Normal
    highlight link purescriptDelimiter Normal
  perl: |
    setlocal shiftwidth=4
  go: |
    if getline(1) =~# 'DO NOT EDIT'
      setlocal nomodifiable
    endif
  make: |
    setlocal noexpandtab
  sh: |
    setlocal iskeyword=36,45,48-57,64,95,a-z,A-Z,192-255
  zsh: |
    setlocal iskeyword=36,45,48-57,64,95,a-z,A-Z,192-255
  markdown: |
    setlocal nosmartindent noautoindent
    execute 'setlocal ' . (search("[^\x01-\x7e]", 'n') == 0 && line('$') > 5 ? '' : 'no') . 'spell'
  hatena: |
    setlocal nosmartindent noautoindent
  csv: |
    set foldmethod=manual
  dictionary: |
    nmap <buffer> <C-@> <Plug>(dictionary_jump_back)
  unite: |
    inoremap <silent> <buffer> <C-z> <Nop>
    inoremap <silent> <buffer> <C-o> <Nop>
    nmap <buffer> <C-a> <Plug>(unite_insert_enter)
    nmap <buffer> <BS> <Plug>(unite_exit)
  vimfiler: |
    nunmap <buffer> <C-l>
    nunmap <buffer> \
    nunmap <buffer> gr
    nunmap <buffer> gf
    nunmap <buffer> H
    nnoremap <buffer> <C-l> <ESC><C-w>l
    nmap <buffer> <C-r> <Plug>(vimfiler_redraw_screen)
    nmap <buffer> o <Plug>(vimfiler_sync_with_current_vimfiler)
    nmap <buffer> O <Plug>(vimfiler_sync_with_current_vimfiler)
    nmap <buffer><silent><expr> <CR> vimfiler#smart_cursor_map("\<Plug>(vimfiler_cd_file)", vimfiler#get_filename() =~? '\.\(exe\\|png\\|gif\\|jpe\?g\\|pdf\)$' ? "\<Plug>(vimfiler_execute_system_associated)" : "\<Plug>(vimfiler_edit_file)")
    nmap <buffer><silent> l <CR>
    nmap <buffer><expr> e vimfiler#smart_cursor_map("\<Plug>(vimfiler_cd_file)", "\<Plug>(vimfiler_edit_file)")
    nnoremap <buffer><silent> t :<C-u>call vimfiler#mappings#do_action(b:vimfiler, 'change_time')<CR>
    nnoremap <buffer><silent> B :<C-u>call <SID>bed_open(vimfiler#get_filename())<CR>
    function! s:bed_open(filename) abort
      execute 'Term -close -opener=new bed' escape(fnameescape(a:filename), '\\')
    endfunction
  agit: |
    nmap <buffer> <C-r> <Plug>(agit-reload)
    nunmap <buffer> <C-k>
    nunmap <buffer> <C-j>
  agit_diff: |
    nmap <buffer> <C-r> <Plug>(agit-reload)
  agit_stat: |
    nmap <buffer> <C-r> <Plug>(agit-reload)
  gina-blame: |
    highlight link GinaBlameSummary Normal
  gina-commit: |
    setlocal spell
  gita-status: |
    nmap <buffer> D <Plug>(gita-checkout)
    nmap <buffer> dd <Plug>(gita-checkout)
  thumbnail: |
    let b:highlighturl_enable = 0
  calendar: |
    nunmap <buffer> <C-h>
    nunmap <buffer> <C-l>
  quickrun: |
    setlocal nonumber tabstop=8 nolist
  haskell: |
    setlocal iskeyword=39,48-57,95,a-z,A-Z,192-255
    augroup haskell-bufwritepre
      autocmd BufWritePre <buffer> HaskellSortImport
    augroup END
  pdf: |
    nmap <silent><buffer> <C-@> <C-t>
  nginx: |
    setlocal shiftwidth=4
  gitcommit: |
    setlocal spell

syntax:
  qf: |
    execute 'syntax match qfPathIgnore'
          \ string(escape(qffrom#git_root(), '*~\.^$[]') . '/\|'
          \ . escape(expand('~'), '*~\.^$[]') . '/[^/]\+/')
          \ 'containedin=qfDirectory conceal'
    syntax match qfDirectory '^[^|]*' nextgroup=qfSeparator
    syntax match qfFileName '[^/|]\+\ze|' contained containedin=qfDirectory
    syntax match qfSeparator '|' nextgroup=qfLineNr contained
    syntax match qfLineNr '[^|]*' contained contains=qfError
    syntax match qfError 'error' contained
    highlight link qfDirectory Identifier
    highlight link qfFileName PreProc
    highlight link qfLineNr LineNr
    highlight link qfError Error
    highlight link qfPathIgnore qfDirectory
    setlocal conceallevel=3 nowrap
    let b:current_syntax = 'qf'
  quickrun: |
    syntax keyword Error Error ERROR error warning Warning WARNING Overfull
    syntax match Error '^!.*'
    syntax match quickrunPath '\(^\|\s\)\(\(\.\|\~\)\?\|\.\.\?\)\(\/\([[:alnum:]_.][[:alnum:]_.-]\+\)\)\+\/\?'
    syntax match quickrunPath '\(\(\.\|\~\)\?\/\|\.\.\?\)\(\([[:alpha:]_.][[:alnum:]_.-]*\)\/\)\+\(\([[:alnum:]_.][[:alnum:]_.-]\+\)\|.\)\?'
    syntax match quickrunPath '[[:alnum:]]\@<!\.\?\/\([a-z][[:alnum:]_-]*\)\.\([a-z]*[[:alnum:]_-]\+\)'
    syntax match quickrunPath '\(^\|\s\)\(\(\.\|\~\)\?\/\|\.\.\?\)\?\(\([[:alnum:]_.][[:alnum:]_.-]*\)\/\)\+\(\([[:alnum:]_.][[:alnum:]_.-]\+\)\|.\)\?'
    syntax match quickrunPath '\(\/\|\.\.\?\)\(\([[:alpha:]_.][[:alnum:]_.-]*\)\/\)\+\(\([[:alnum:]_.][[:alnum:]_.-]\+\)\|.\)\?'
    syntax match quickrunImage '<\@<=[[:alnum:]]\@<!\.\?\/\?\([[:alnum:]_-]*\)\.\([a-z]*[[:alnum:]_-]\+\)>\@='
    syntax match quickrunStringSpecial '\\\([0-9]\+\|o[0-7]\+\|x[0-9a-fA-F]\+\|[\"\\'&\\abfnrtv]\|^[A-Z^_\[\\\]]\)' contains=quickrunFunction contained
    syntax region quickrunString start=+"+ end=+"+ contains=quickrunStringSpecial oneline
    syntax region quickrunString start=+'+ end=+'+ contains=quickrunStringSpecial oneline
    syntax region quickrunString start=+`+ end=+`+ contains=quickrunStringSpecial oneline
    syntax region quickrunString start=+`+ end=+'+ contains=quickrunStringSpecial oneline
    syntax region quickrunString start=+‘+ end=+’+ contains=quickrunStringSpecial oneline
    highlight link quickrunStringSpecial SpecialChar
    highlight link quickrunString String
    highlight link quickrunPath Preproc
    highlight link quickrunImage Type
    syntax match quickrunNumber '\([+-]\=\<\d\+\>\|[+-]\=\<0[xX]\x\+\>\|[+-]\=\<0[oO]\o\+\>\)\.\@!'
    highlight link quickrunNumber Number
    syntax match quickrunFloat '\<[+-]\=\%(\d\+\.\d\+\|\d\+\.\|\.\d\+\)\%([eE][+-]\=\d\+\)\?'
    highlight link quickrunFloat Float
    syntax match quickrunDate '\<\d\{4}\([-/]\)\d\{1,2}\1\d\{1,2}\>'
    highlight link quickrunDate Constant
    syntax match quickrunTime '\<\d\{1,2}:\d\{1,2}:\d\{1,2}\>'
    highlight link quickrunTime Constant
    syntax match quickrunDateTime '\<\d\{4}\([-/]\)\d\{1,2}\1\d\{1,2}T\d\{1,2}:\d\{1,2}:\d\{1,2}\%(Z\|[-+]\d\{4\}\)\>'
    highlight link quickrunDateTime Constant
  vimfiler: |
    command! -nargs=* VimfilerSyntax
          \ execute 'syntax match' [<f-args>][0] '/\%3c.*' . [<f-args>][1] . '/'
          \  'contained containedin=vimfilerNormalFile'
          \  'contains=vimfilerColumn__Type,vimfilerColumn__Size,vimfilerColumn__Time' |
          \ execute 'highlight link' [<f-args>][0] [<f-args>][2]
    VimfilerSyntax vimfilerTypeArchive    \[A\] Special
    VimfilerSyntax vimfilerTypeDirectory  \[D\] Preproc
    VimfilerSyntax vimfilerTypeExecute    \[X\] Statement
    VimfilerSyntax vimfilerTypeImage      \[I\] Type
    VimfilerSyntax vimfilerTypeLink       \[L\] Identifier
    VimfilerSyntax vimfilerTypeMultimedia \[M\] SpecialComment
    VimfilerSyntax vimfilerTypeSystem     \[S\] Comment
    VimfilerSyntax vimfilerTypeText       \[T\] Constant
    VimfilerSyntax vimfilerTypePdfHtml    \.\%(pdf\|html\)\s Function
    delcommand VimfilerSyntax
    execute 'syntax match vimfilerImportant' string(
          \  ' \v%(README%(\.%(mk?d|rst))?>|manifest.json|main\.pdf|'
          \. '%(Dropbox|[Dd]ownloads|Library|src|paper|[rh]s|miv|\.vim|2?bf|maze|cam|git-branch-name|'
          \. 'lightline(-powerful)?|calendar|thumbnail|dictionary|landscape|spellbad-pattern|'
          \. 'screensaver|gitbranch|closebuffer|external|insert-mode-motion|cmdline-%(ranges|escape)|'
          \. 'autoft|extracmd|histexclude|tmpbuffer|extra-snippets|highlighturl|cursorword|parenmatch|'
          \. 'winfix|qffrom|qfedit|grep|increx|unite-%(preview|eject|changetime|auto-open)|viva|'
          \. 'hatena-link|haskell-%(indent|sort-import)|quickrun-lightline-hooks|'
          \. '%(base58|volume|zshhist|maketen|astgen|timefmt|rassemble|kaitai)-go|'
          \. 'rexdep|fillin|bed|go%(jo|jq|f)?|mmv|mkrg|qhs|'
          \. 'formulate|homebrew-tap|setup|py2bf|github-%(migrator|better-header))/)'
          \ ) 'contained containedin=vimfilerNonMark,vimfilerNormalFile,vimfilerClosedFile,vimfilerOpenedFile'
    highlight link vimfilerColumn__TimeToday Comment
    highlight link vimfilerColumn__TimeWeek Special
    highlight link vimfilerColumn__TimeNormal Identifier
    highlight link vimfilerColumn__SizeLine Constant
    highlight link vimfilerClosedFile Preproc
    highlight link vimfilerCurrentDirectory Preproc
    highlight link vimfilerImportant SpecialChar
    highlight link vimfilerMarkedFile StorageClass
    highlight link vimfilerNonMark LineNr
    highlight link vimfilerOpenedFile Preproc
